# dict = {1:{"bbox":"a", "center":[1.1, 1.2], "name":"c"},
#         2:{"bbox":"d", "center":[2.1, 2.2], "name":"f"},
#         3:{"bbox":"g", "center":[3.1, 3.2], "name":"i"},
#         4:{"bbox":"j", "center":[4.1, 4.2], "name":"l"},
#         5:{"bbox":"m", "center":[5.1, 5.2], "name":"o"},
#         6:{"bbox":"p", "center":[5.3, 5.4], "name":"r"}}

# def get_target_center(thedict, target):
#     for a, b in thedict.items():
#         if b['name'] == target:
#             return b['center'][0], b['center'][1]
        
# x, y = get_target_center(dict, 'c')

# from re import M
# import rospy
# import struct
# from sensor_msgs.msg import PointCloud2
# from sensor_msgs import point_cloud2
# from visualization_msgs.msg import Marker

# global PixelX
# global PixelY

# marker_pub = rospy.Publisher("/visualization_marker", Marker, queue_size = 2)

# col = 960
# row = 540

# def publishm(x, y, z):
#     marker = Marker()

#     marker.header.frame_id = "zed2i_base_link"
#     marker.header.stamp = rospy.Time.now()

#     marker.type = Marker.SPHERE
#     marker.id = 0

#     marker.scale.x = 0.1
#     marker.scale.y = 0.1
#     marker.scale.z = 0.1

#     marker.color.r = 0.0
#     marker.color.g = 1.0
#     marker.color.b = 0.0
#     marker.color.a = 1.0
    
#     marker.pose.position.x = x
#     marker.pose.position.y = y
#     marker.pose.position.z = z
#     marker.pose.orientation.x = 0.0
#     marker.pose.orientation.y = 0.0
#     marker.pose.orientation.z = 0.0
#     marker.pose.orientation.w = 1.0
#     marker_pub.publish(marker)

# def callback_ptclud(ptcloud_data):
#     assert isinstance(ptcloud_data, PointCloud2)
#     # points = point_cloud2.read_points_list(ptcloud_data)
#     # PointIndex = PixelX + ( PixelY * 1920)
#     # print(points[PointIndex])
#     index = (row*ptcloud_data.row_step) + (col*ptcloud_data.point_step)
#     (X, Y, Z) = struct.unpack_from('fff', ptcloud_data.data, offset=index)
#     print(X, Y, Z)
#     publishm(X, Y, Z)
    

# def listener():
#     rospy.Subscriber("/zed2i/zed_node/point_cloud/cloud_registered", PointCloud2, callback_ptclud)
#     rospy.spin()

# if __name__ == '__main__':
#     rospy.init_node("realsense_subscriber", anonymous=True)
#     listener()
#2208, 1242