#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <tf2_msgs/TFMessage.h>

int main(int argc, char** argv)
{
    ros::init(argc, argv, "tf_publisher");
    ros::NodeHandle node;

    tf::TransformListener listener;
    tf2_msgs::TFMessage tf_msg;
    geometry_msgs::TransformStamped transform_msg;
    transform_msg.header.frame_id = "target_frame"; // The frame the transform is relative to
    transform_msg.child_frame_id = "source_frame"; // The frame the transform is describing

    // ros::Publisher tf_pub = node.advertise<tf2_msgs::TFMessage>("/tf", 10);

    // ros::Rate rate(10.0);
    // while (node.ok()){
        tf::StampedTransform transform;
        try{
            listener.lookupTransform("target_frame", "source_frame", ros::Time(0), transform);
        }
        catch (tf::TransformException ex){
            ROS_ERROR("%s",ex.what());
            ros::Duration(1.0).sleep();
            continue;
        }
        // Transform is available, build and publish the message
        transform_msg.transform.translation.x = transform.getOrigin().x();
        transform_msg.transform.translation.y = transform.getOrigin().y();
        transform_msg.transform.translation.z = transform.getOrigin().z();
        transform_msg.transform.rotation.x = transform.getRotation().x();
        transform_msg.transform.rotation.y = transform.getRotation().y();
        transform_msg.transform.rotation.z = transform.getRotation().z();
        transform_msg.transform.rotation.w = transform.getRotation().w();
        transform_msg.header.stamp = ros::Time::now();
        // tf_msg.transforms.push_back(transform_msg);
        // tf_pub.publish(tf_msg);
        rate.sleep();
    // }

    return 0;
}





tf::TransformListener listener;
  tf2_msgs::TFMessage tf_msg;
  geometry_msgs::TransformStamped transform_msg;
  transform_msg.header.frame_id = "panda_link0"; // The frame the transform is relative to
  transform_msg.child_frame_id = "box_frame"; // The frame the transform is describing

  tf::StampedTransform transform;

  listener.lookupTransform("panda_link0", "box_frame", ros::Time(0), transform);

  xx = transform.getOrigin().x();
  yy = transform.getOrigin().y();
  zz = transform.getOrigin().z();
  tf::Matrix3x3 rotation(transform.getRotation());
  tf::Vector3 euler_angles;
  roll = euler_angles[0];
  pitch = euler_angles[0];
  yall = euler_angles[0];
        
  ROS_INFO("roll = %f, pitch = %f, yall = %f", roll, pitch, yall);