#include <ros/ros.h>
#include <tf2_ros/static_transform_broadcaster.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <tf2/LinearMath/Quaternion.h>
#include <tf/transform_datatypes.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose.h>
#include <bhampick/dimmsg.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <tf/transform_listener.h>

class tffrompose{
    private:
        tf2_ros::StaticTransformBroadcaster bc;
        tf2_ros::StaticTransformBroadcaster bc1;
        tf2_ros::StaticTransformBroadcaster bc2;
        tf2_ros::StaticTransformBroadcaster bc3;
        ros::Subscriber subscriber;
        ros::Subscriber subscriber2;
        double ax, ay, az;
        double qx, qy, qz, qw;
        double dimx, dimy, dimz;
        double roll, pitch, yaw;
        bool check = false;
        double gripperlength = 0.085;
        tf::Vector3 orient;
        tf::Quaternion orientation;
        moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
        tf2::Quaternion quat;
    
    public:
        tffrompose(ros::NodeHandle *nodehan){
            subscriber = nodehan->subscribe("/goal", 10, &tffrompose::callback1,this);
            subscriber2 = nodehan->subscribe("/dim", 10, &tffrompose::callback2,this);
        }

        void callback1(const geometry_msgs::PoseStamped& data){
            ROS_INFO("Pose");
            geometry_msgs::Pose p = data.pose;
            ax = p.position.x;
            ay = p.position.y;
            az = 0.3;

            orientation[0] = p.orientation.x;
            orientation[1] = p.orientation.y;
            orientation[2] = p.orientation.z;
            orientation[3] = p.orientation.w;
            tf::Matrix3x3(orientation).getRPY(roll,pitch,yaw);

            if(yaw <= 1.57 && yaw >= -1.57){
                qx = p.orientation.x;
                qy = p.orientation.y;
                qz = p.orientation.z;
                qw = p.orientation.w;
            }
            else{
                quat.setRPY(roll, pitch, yaw+3.14);
                qx = quat.getX();
                qy = quat.getY();
                qz = quat.getZ();
                qw = quat.getW();
            }
            createCollisionObjectFrame(bc, "world", "obj", ax, ay, az, qx, qy, qz, qw);

            tf::TransformListener listener;
            try {
                listener.waitForTransform("world", "obj", ros::Time(0), ros::Duration(1.0));

                if(dimx > gripperlength && dimy > gripperlength){
                    ROS_INFO("Cannot grip");
                }

                else if(dimx < gripperlength && dimy < gripperlength){
                    if((ay > 0)&&(((ax > fabs(ay))&&((yaw > -1.57 && yaw < 0)||(yaw > 1.57 && yaw < 3.14)))
                    ||((ax < fabs(ay))&&((yaw > 0 && yaw < 1.57)||(yaw > -3.14 && yaw < -1.57))))){
                        createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", 0, -dimy/2, 0, 0, 0, 1.57);
                        createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", 0, -dimy/2-0.1, 0, 0, 0, 1.57);
                        createCollisionObjectFrameRPY(bc3, "obj", "obj_grasp_pose", 0, -dimy/2, 0.1, 0, 0, 1.57);
                    }
                    else if((ay > 0)&&(((ax < fabs(ay))&&((yaw > -1.57 && yaw < 0)||(yaw > 1.57 && yaw < 3.14))))){
                        createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", dimx/2, 0, 0, 0, 0, 3.14);
                        createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", dimx/2+0.1, 0, 0, 0, 0, 3.14);
                        createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", dimx/2, 0, 0.1, 0, 0, 3.14);
                    }
                    else if((ay < 0)&&(((ax > fabs(ay))&&((yaw > 0 && yaw < 1.57)||(yaw > -3.14 && yaw < -1.57)))
                    ||((ax < fabs(ay))&&((yaw > -1.57 && yaw < 0)||(yaw > 1.57 && yaw < 3.14))))){
                        createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", 0, dimy/2, 0, 0, 0, -1.57);
                        createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", 0, dimy/2+0.1, 0, 0, 0, -1.57);
                        createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", 0, dimy/2, 0.1, 0, 0, -1.57);
                    }
                    else if((ay < 0)&&(((ax < fabs(ay))&&((yaw > 0 && yaw < 1.57)||(yaw > -3.14 && yaw < -1.57))))){
                        createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", dimx/2, 0, 0, 0, 0, 3.14);
                        createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", dimx/2+0.1, 0, 0, 0, 0, 3.14);
                        createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", dimx/2, 0, 0.1, 0, 0, 3.14);
                    }
                    else{
                        createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", -dimx/2, 0, 0, 0, 0, 0);
                        createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", -dimx/2-0.1, 0, 0, 0, 0, 0);
                        createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", -dimx/2, 0, 0.1, 0, 0, 0);
                    }
                }
                else if(dimy > gripperlength){
                    if(ay <= 0){
                        if(((yaw < 0 && yaw > -1.57)&&(ax > fabs(ay)))||((yaw > 1.57 && yaw < 3.14)&&(ax > fabs(ay)))){
                            createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", 0, -dimy/2, 0, 0, 0, 1.57);
                            createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", 0, -dimy/2-0.1, 0, 0, 0, 1.57);
                            createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", 0, -dimy/2, 0.1, 0, 0, 1.57);
                        }
                        else{
                            createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", 0, dimy/2, 0, 0, 0, -1.57);
                            createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", 0, dimy/2+0.1, 0, 0, 0, -1.57);
                            createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", 0, dimy/2, 0.1, 0, 0, -1.57);
                            }
                    }
                    else{
                        if((yaw > -1.57 && yaw < 0)||(yaw > 1.57 && yaw < 3.14)||((yaw > 0 && yaw < 1.57)&&(ay > ax))
                        ||((yaw > -3.14 && yaw < -1.57)&&(ay > ax))){
                            createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", 0, -dimy/2, 0, 0, 0, 1.57);
                            createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", 0, -dimy/2-0.1, 0, 0, 0, 1.57);
                            createCollisionObjectFrameRPY(bc1, "obj", "obj_lift_pose", 0, -dimy/2, 0.1, 0, 0, 1.57);
                        }
                        else{
                            createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", 0, dimy/2, 0, 0, 0, -1.57);
                            createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", 0, dimy/2+0.1, 0, 0, 0, -1.57);
                            createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", 0, dimy/2, 0.1, 0, 0, -1.57);
                            }
                    }
                }
                else if(dimx > gripperlength){
                    if(((ay < 0)&&(fabs(ay) > ax)&&((yaw > 0 && yaw < 1.57)||(yaw > -3.14 && yaw < -1.57)))
                    ||((ay > 0)&&(fabs(ay) > ax)&&((yaw > -1.57 && yaw < 0)||(yaw > 1.57 && yaw < 3.14)))){
                        createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", dimx/2, 0, 0, 0, 0, 3.14);
                        createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", dimx/2+0.1, 0, 0, 0, 0, 3.14);
                        createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", dimx/2, 0, 0.1, 0, 0, 3.14);
                    }
                    else{
                        createCollisionObjectFrameRPY(bc1, "obj", "obj_grasp_pose", -dimx/2, 0, 0, 0, 0, 0);
                        createCollisionObjectFrameRPY(bc2, "obj", "obj_approach_pose", -dimx/2-0.1, 0, 0, 0, 0, 0);
                        createCollisionObjectFrameRPY(bc3, "obj", "obj_lift_pose", -dimx/2, 0, 0.1, 0, 0, 0);
                    }
                }
            }
            catch (tf::TransformException& ex) {
                ROS_ERROR("%s", ex.what());
            }
            return;
        }

        void callback2(const bhampick::dimmsg& data)
        {
            ROS_INFO("Dim");
            dimx = data.dimensionx;
            dimy = data.dimensiony;
            dimz = data.dimensionz;
            if(check == true)
            {
                addCollisionObjects(planning_scene_interface, ax, ay, az, qx, qy, qz, qw, dimx, dimy, dimz);
            }
        }

        void addCollisionObjects(moveit::planning_interface::PlanningSceneInterface &planning_scene_interface, 
                                double ax, double ay, double az, double qx, double qy, double qz, 
                                double qw, double dimx, double dimy, double dimz)
        { 
            ROS_INFO("void addcol");
            moveit_msgs::CollisionObject collision_object;
            collision_object.header.frame_id = "cr3_base_link";
            collision_object.id = "box1";

            shape_msgs::SolidPrimitive primitive;
            primitive.type = primitive.BOX;
            primitive.dimensions.resize(3);
            primitive.dimensions[0] = dimx;
            primitive.dimensions[1] = dimy;
            primitive.dimensions[2] = dimz;

            geometry_msgs::Pose box_pose;
            box_pose.orientation.x = qx;
            box_pose.orientation.y = qy;
            box_pose.orientation.z = qz;
            box_pose.orientation.w = qw;
            box_pose.position.x = ax;
            box_pose.position.y = ay;
            box_pose.position.z = az;

            collision_object.primitives.push_back(primitive);
            collision_object.primitive_poses.push_back(box_pose);
            collision_object.operation = collision_object.ADD;

            std::vector<moveit_msgs::CollisionObject> collision_objects;
            collision_objects.push_back(collision_object);

            ROS_INFO("Add an object into the world");
            planning_scene_interface.addCollisionObjects(collision_objects);
            check = false;
        }

        void createCollisionObjectFrame(tf2_ros::StaticTransformBroadcaster& broadcaster,
                                const std::string& parent_frame,
                                const std::string& child_frame,
                                const double x, const double y, const double z,
                                const double qx, const double qy, const double qz, const double qw)
        {
        ROS_INFO("create");
        geometry_msgs::TransformStamped transform;
        transform.header.stamp = ros::Time::now();
        transform.header.frame_id = parent_frame;
        transform.child_frame_id = child_frame;
        transform.transform.translation.x = x;
        transform.transform.translation.y = y;
        transform.transform.translation.z = z;

        transform.transform.rotation.x = qx;
        transform.transform.rotation.y = qy;
        transform.transform.rotation.z = qz;
        transform.transform.rotation.w = qw;

        broadcaster.sendTransform(transform);
        check = true;
        return;
        }
        void createCollisionObjectFrameRPY(tf2_ros::StaticTransformBroadcaster& broadcaster,
                                const std::string& parent_frame,
                                const std::string& child_frame,
                                const double x, const double y, const double z,
                                const double roll, const double pitch, const double yaw)
        {
        geometry_msgs::TransformStamped transform;
        transform.header.stamp = ros::Time::now();
        transform.header.frame_id = parent_frame;
        transform.child_frame_id = child_frame;
        transform.transform.translation.x = x;
        transform.transform.translation.y = y;
        transform.transform.translation.z = z;
        tf2::Quaternion quat;
        quat.setRPY(roll, pitch, yaw);
        transform.transform.rotation = tf2::toMsg(quat);
        broadcaster.sendTransform(transform);
        }
};

int main(int argc, char** argv)
{
    ros::init(argc, argv, "Broadcast_Grasps_TF");
    ros::NodeHandle nh;
    tffrompose g = tffrompose(&nh);
    ros::spin();
}
