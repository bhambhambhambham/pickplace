#include <ros/ros.h>
#include <ros/console.h>
#include <math.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <bhampick/boxpose.h>
#include <moveit_msgs/PickupAction.h>
#include <tf/transform_broadcaster.h>
#include <tf2_ros/static_transform_broadcaster.h>

// The circle constant tau = 2*pi. One tau is one rotation in radians.
const double tau = 2 * M_PI;
double xx;
double yy;

void openGripper(trajectory_msgs::JointTrajectory &posture)
{
  posture.joint_names.resize(2);
  posture.joint_names[0] = "panda_finger_joint1";
  posture.joint_names[1] = "panda_finger_joint2";

  posture.points.resize(1);
  posture.points[0].positions.resize(2);
  posture.points[0].positions[0] = 0.04;
  posture.points[0].positions[1] = 0.04;
  posture.points[0].time_from_start = ros::Duration(0.5);
}

void closedGripper(trajectory_msgs::JointTrajectory &posture)
{
  posture.joint_names.resize(2);
  posture.joint_names[0] = "panda_finger_joint1";
  posture.joint_names[1] = "panda_finger_joint2";

  /* Set them as closed. */
  posture.points.resize(1);
  posture.points[0].positions.resize(2);
  posture.points[0].positions[0] = 0.00;
  posture.points[0].positions[1] = 0.00;
  posture.points[0].time_from_start = ros::Duration(0.5);
}

void pick(moveit::planning_interface::MoveGroupInterface &move_group, double x, double y, double z, double roll, double pitch, double yaw, double l, double w, double d)
{
  std::vector<moveit_msgs::Grasp> grasps;
  grasps.resize(1);

  grasps[0].grasp_pose.header.frame_id = "panda_link0";
  tf2::Quaternion orientation;
  orientation.setRPY(-tau / 4, -tau / 8, -tau / 4);
  grasps[0].grasp_pose.pose.orientation = tf2::toMsg(orientation);

  // grasps[0].grasp_pose.pose.orientation.x = roll;
  // grasps[0].grasp_pose.pose.orientation.y = pitch;
  // grasps[0].grasp_pose.pose.orientation.z = yaw;
  // grasps[0].grasp_pose.pose.orientation.w = 1;
  grasps[0].grasp_pose.pose.position.x = (x - 0.085);
  grasps[0].grasp_pose.pose.position.y = y;
  grasps[0].grasp_pose.pose.position.z = z;

  grasps[0].pre_grasp_approach.direction.header.frame_id = "panda_link0";
  // grasps[0].pre_grasp_approach.direction.vector.x = cos(roll);
  grasps[0].pre_grasp_approach.direction.vector.x = 1;
  // grasps[0].pre_grasp_approach.direction.vector.y = cos(pitch);
  // grasps[0].pre_grasp_approach.direction.vector.z = cos(yaw);
  grasps[0].pre_grasp_approach.min_distance = 0.095;
  grasps[0].pre_grasp_approach.desired_distance = 0.115;

  grasps[0].post_grasp_retreat.direction.header.frame_id = "panda_link0";
  grasps[0].post_grasp_retreat.direction.vector.z = 1.0;
  grasps[0].post_grasp_retreat.min_distance = 0.1;
  grasps[0].post_grasp_retreat.desired_distance = 0.25;

  openGripper(grasps[0].pre_grasp_posture);
  closedGripper(grasps[0].grasp_posture);
  ROS_INFO_STREAM("Before pick is fine");
  move_group.setSupportSurfaceName("table1");
  ROS_INFO_STREAM("Set support");
  move_group.pick("object", grasps);
  ROS_INFO_STREAM("End pick but not return yet");
  return;
}

void createCollisionObjectFrame(tf2_ros::StaticTransformBroadcaster& broadcaster,
                                const std::string& parent_frame,
                                const std::string& child_frame,
                                const double x, const double y, const double z,
                                const double roll, const double pitch, const double yaw)
{
  // Create TransformStamped message
  geometry_msgs::TransformStamped transform;
  transform.header.frame_id = parent_frame;
  transform.child_frame_id = child_frame;
  transform.transform.translation.x = x;
  transform.transform.translation.y = y;
  transform.transform.translation.z = z;
  tf2::Quaternion quat;
  quat.setRPY(roll, pitch, yaw);
  transform.transform.rotation = tf2::toMsg(quat);

  // Broadcast TransformStamped message
  broadcaster.sendTransform(transform);
}

void addCollisionObjects(moveit::planning_interface::PlanningSceneInterface &planning_scene_interface, double x, double y, double z, double roll, double pitch, double yaw, double l, double w, double d)
{ 
  std::vector<moveit_msgs::CollisionObject> collision_objects;
  collision_objects.resize(1);

  collision_objects[0].header.frame_id = "panda_link0";
  collision_objects[0].id = "object";

  collision_objects[0].primitives.resize(1);
  collision_objects[0].primitives[0].type = collision_objects[1].primitives[0].BOX;
  collision_objects[0].primitives[0].dimensions.resize(3);
  collision_objects[0].primitives[0].dimensions[0] = w;
  collision_objects[0].primitives[0].dimensions[1] = l;
  collision_objects[0].primitives[0].dimensions[2] = d;

  collision_objects[0].primitive_poses.resize(1);
  collision_objects[0].primitive_poses[0].position.x = x;
  collision_objects[0].primitive_poses[0].position.y = y;
  collision_objects[0].primitive_poses[0].position.z = z;

  tf2::Quaternion boxorientation;
  boxorientation.setRPY(roll, pitch, yaw);
  collision_objects[0].primitive_poses[0].orientation = tf2::toMsg(boxorientation);

  collision_objects[0].operation = collision_objects[0].ADD;

  planning_scene_interface.applyCollisionObjects(collision_objects);
}

bool callback(bhampick::boxpose::Request &req, bhampick::boxpose::Response &res)
{
  xx = req.x;
  yy = req.y;

  ROS_INFO_STREAM("Start Callback Loop");

  ros::WallDuration(1.0).sleep();
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
  moveit::planning_interface::MoveGroupInterface group("panda_arm");
  group.setPlanningTime(45.0);

  tf2_ros::StaticTransformBroadcaster broadcaster;
  createCollisionObjectFrame(broadcaster, "panda_link0", "box_frame", xx, yy, req.z, req.roll, req.pitch, req.yaw);
  addCollisionObjects(planning_scene_interface, xx, yy, req.z, req.roll, req.pitch, req.yaw, req.length, req.width, req.depth);
  ros::WallDuration(1.0).sleep();

  // pick(group, xx, yy, req.z, req.roll, req.pitch, req.yaw, req.length, req.width, req.depth);
  // ROS_DEBUG("Picked");
  // const moveit::core::JointModelGroup *joint_model_group =
  //     group.getCurrentState()->getJointModelGroup("panda_arm");

  // geometry_msgs::Pose target_pose1;
  // target_pose1.orientation.x = 0;
  // target_pose1.orientation.y = 0;
  // target_pose1.orientation.z = 0;
  // target_pose1.orientation.w = 1.0;
  // target_pose1.position.x = 0.28;
  // target_pose1.position.y = -0.2;
  // target_pose1.position.z = 0.5;
  // group.setPoseTarget(target_pose1);

  // // moveit::planning_interface::MoveGroupInterface::Plan my_plan;

  // // group.execute(my_plan);
  // group.move();
  // ROS_INFO_STREAM("Moved");
  return true;
}
int main(int argc, char **argv)
{
  ros::init(argc, argv, "panda_arm_pick_place");
  ros::NodeHandle nh;
  ros::ServiceServer service = nh.advertiseService("boxpose", callback);
  ros::spin();
  return 0;
}