#!/usr/bin/env python3

from sympy import false
import rospy
import moveit_commander
from geometry_msgs.msg import Pose
import tf
import copy
from bhampick.srv import graspit, graspitResponse

class cr3pick:
    def __init__(self):
        
        rospy.init_node("pickcol", anonymous=True)
        self.move_group = moveit_commander.MoveGroupCommander("arm")
        self.scene = moveit_commander.PlanningSceneInterface()
        self.robot = moveit_commander.RobotCommander()
        self.tf_listener = tf.TransformListener()
        self.s = rospy.Service("graspit", graspit, self.callback)

    def callback(self, data):
        if(data.graspstatus == True):
            pass
        else:
            rospy.loginfo("Grasp Service = False") 
            return graspitResponse(False)
        
        ap = Pose()
        gp = Pose()
        rp = Pose()

        self.tf_listener.waitForTransform("world", "obj_approach_pose", rospy.Time(), rospy.Duration(3.0))
        (trans, rot) = self.tf_listener.lookupTransform("world", "obj_approach_pose", rospy.Time(0))

        ap.position.x = trans[0]
        ap.position.y = trans[1]
        ap.position.z = trans[2]
        ap.orientation.x = rot[0]
        ap.orientation.y = rot[1]
        ap.orientation.z = rot[2]
        ap.orientation.w = rot[3]

        self.move_group.set_pose_target(ap)
        success = self.move_group.go(wait=True)
        self.move_group.stop()
        self.move_group.clear_pose_targets()
        rospy.sleep(1)
        
        if success:
            (trans2, rot2) = self.tf_listener.lookupTransform("world", "obj_grasp_pose", rospy.Time(0))
            
            gp.position.x = trans2[0]
            gp.position.y = trans2[1]
            gp.position.z = trans2[2]
            gp.orientation.x = rot2[0]
            gp.orientation.y = rot2[1]
            gp.orientation.z = rot2[2]
            gp.orientation.w = rot2[3]
            
            cartesianpath = []
            cartesianpath.append(copy.deepcopy(gp))
            (plan,fraction) = self.move_group.compute_cartesian_path(cartesianpath, 0.01, 0.0)
            self.move_group.execute(plan, wait=True)
            
            grasping_group = "Hand"
            touch_links = self.robot.get_link_names(group=grasping_group)
            self.scene.attach_box("robotiq_85_base_link", "box1", touch_links=touch_links)
            rospy.sleep(0.7) # Grasp
            
            (trans3, rot3) = self.tf_listener.lookupTransform("world", "obj_lift_pose", rospy.Time(0))

            rp.position.x = trans3[0]
            rp.position.y = trans3[1]
            rp.position.z = trans3[2]
            
            rp.orientation.x = rot3[0]
            rp.orientation.y = rot3[1]
            rp.orientation.z = rot3[2]
            rp.orientation.w = rot3[3]
            
            cartesianpath[0] = copy.deepcopy(rp)
            (plan,fraction) = self.move_group.compute_cartesian_path(cartesianpath, 0.01, 0.0)
            self.move_group.execute(plan, wait=True)
            rospy.sleep(1)
            self.scene.remove_attached_object("robotiq_85_base_link", "box1")
            return graspitResponse(True)
        else:
            return graspitResponse(False)

if __name__ == "__main__":
    cr3pick = cr3pick()
    rospy.spin()