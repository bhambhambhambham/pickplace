#include <ros/ros.h>
#include <cmath>
#include <tf2_ros/static_transform_broadcaster.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <tf2_ros/transform_listener.h>
#include <tf2/LinearMath/Quaternion.h>
#include <geometry_msgs/TransformStamped.h>
#include <tf/transform_datatypes.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <tf/transform_listener.h>
#include <pickplace_include/pickplace.h>
#include <pickplace_include/dimension.h>
#include <std_srvs/Trigger.h>
#include <pickplace_include/tfcount.h>
#include <pickplace_include/placecond.h>

class place{
    private:
        tf2_ros::StaticTransformBroadcaster bcplace;
        tf2_ros::StaticTransformBroadcaster bcplaceapproach;
        tf2_ros::StaticTransformBroadcaster bcplacesaferetreat;

        ros::ServiceServer service;
        ros::ServiceServer service2;
        ros::ServiceServer service3;
        tf::StampedTransform tfStamped;

        double pi = M_PI;
        double approach = 0.05;
        double roll, pitch, yaw;
        double safe_retreat = 0.1;
        double retreat = 0.05;
        double up = 0.02;
        double dimensionx, dimensiony, dimensionz;
        double graspdimensionx, graspdimensiony, graspdimensionz;

        bool getdim, gettf;
        bool table;

        ros::ServiceClient client;
        moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
        pickplace_include::placecond srv;
    
    public:
        place(ros::NodeHandle *nodehan){
            service = nodehan->advertiseService("placeit", &place::callback, this);
            service2 = nodehan->advertiseService("setdim", &place::callback2, this);
            service3 = nodehan->advertiseService("setplace", &place::callback3, this);
            client = nodehan->serviceClient<pickplace_include::placecond>("place");
        }

        bool callback3(pickplace_include::tfcount::Request& req, pickplace_include::tfcount::Response& res){
            gettf = true;
            tf::TransformListener listener;
            try{
                ros::Time now = ros::Time::now();
                listener.waitForTransform("obj", req.frame, now, ros::Duration(0.3));
                listener.lookupTransform("obj", req.frame, ros::Time(0), tfStamped);
            }
            catch (tf::TransformException ex){
                ROS_ERROR("%s",ex.what());
            }

            tf::Quaternion objor = tfStamped.getRotation();
            tf::Quaternion q(objor[0], objor[1], objor[2], objor[3]);
            tf::Matrix3x3 m(q);
            m.getRPY(roll, pitch, yaw);
            
            setdimension(roll , pitch, yaw, dimensionx, dimensiony, dimensionz);
            return true;
        }

        bool callback2(pickplace_include::dimension::Request& req, pickplace_include::dimension::Response& res){
            getdim = true;
            dimensionx = req.dimension.x;
            dimensiony = req.dimension.y;
            dimensionz = req.dimension.z;
            res.done = true;
            return true;
        }

        bool callback(pickplace_include::pickplace::Request& req, pickplace_include::pickplace::Response& res){
            createCollisionObjectFrame(bcplace, req.posercam.header.frame_id, "place_place", req.posercam.pose.position.x, req.posercam.pose.position.y,
                                       req.posercam.pose.position.z + up + dimensionz/2, req.posercam.pose.orientation.x, req.posercam.pose.orientation.y,
                                       req.posercam.pose.orientation.z, req.posercam.pose.orientation.w);
            tf::TransformListener listener2;
            table = req.check;
            ROS_WARN_STREAM(table);
            try{
                ros::Time now = ros::Time::now();
                listener2.waitForTransform("cr3_base_link", "place_place", now, ros::Duration(0.3));

                if(table){
                    createCollisionObjectFrameRPY(bcplaceapproach, "place_place", "place_approach", -retreat, 0, 0, 0, 0, 0);
                    createCollisionObjectFrameRPY(bcplacesaferetreat, "place_place", "place_safe_retreat", -safe_retreat, 0, 0, 0, 0, 0);
                    srv.request.states = 1;
                }
                else{
                    createCollisionObjectFrameRPY(bcplaceapproach, "place_place", "place_approach", -approach, 0, 0, 0, 0, 0);
                    createCollisionObjectFrameRPY(bcplacesaferetreat, "place_place", "place_safe_retreat", -safe_retreat, 0, 0, 0, 0, 0);
                    srv.request.states = 2;
                }
                tf::TransformListener listener3;
                try{
                ros::Time now = ros::Time::now();
                listener3.waitForTransform("cr3_base_link", "place_approach", now, ros::Duration(0.3));
                if(client.call(srv)){
                    if(srv.response.success == true){
                        res.graspsuccess = true;
                    }
                    else{
                        res.graspsuccess = false;
                    }
                }
                else{
                    ROS_ERROR("Service Failed");
                }
                }
                catch (tf::TransformException ex){
                    ROS_ERROR("%s",ex.what());
                }
            }
            catch (tf::TransformException ex){
                ROS_ERROR("%s",ex.what());
            }
            gettf = false;
            getdim = false;
            return true;
        }

        void createCollisionObjectFrame(tf2_ros::StaticTransformBroadcaster& broadcaster,
                                const std::string& parent_frame,
                                const std::string& child_frame,
                                const double x, const double y, const double z,
                                const double qx, const double qy, const double qz, const double qw)
        {
        ROS_INFO("Main Object Frame Created");
        geometry_msgs::TransformStamped transform;
        transform.header.stamp = ros::Time::now();
        transform.header.frame_id = parent_frame;
        transform.child_frame_id = child_frame;
        transform.transform.translation.x = x;
        transform.transform.translation.y = y;
        transform.transform.translation.z = z;

        transform.transform.rotation.x = qx;
        transform.transform.rotation.y = qy;
        transform.transform.rotation.z = qz;
        transform.transform.rotation.w = qw;

        broadcaster.sendTransform(transform);
        return;
        }

        void createCollisionObjectFrameRPY(tf2_ros::StaticTransformBroadcaster& broadcaster,
                                const std::string& parent_frame,
                                const std::string& child_frame,
                                const double x, const double y, const double z,
                                const double roll, const double pitch, const double yaw)
        {
        geometry_msgs::TransformStamped transform;
        transform.header.stamp = ros::Time::now();
        transform.header.frame_id = parent_frame;
        transform.child_frame_id = child_frame;
        transform.transform.translation.x = x;
        transform.transform.translation.y = y;
        transform.transform.translation.z = z;
        tf2::Quaternion quat;
        quat.setRPY(roll, pitch, yaw);
        transform.transform.rotation = tf2::toMsg(quat);
        broadcaster.sendTransform(transform);
        return;
        }

        void setdimension(const double r, const double p, const double y,
                          const double dx, const double dy, const double dz)
        {
            if(roundd(fabs(p)) == 0){
                if(roundd(fabs(y)) == roundd(pi/2)){
                    graspdimensionx = dy;
                    graspdimensiony = dx;
                    graspdimensionz = dz;
                }
                else{
                    graspdimensionx = dx;
                    graspdimensiony = dy;
                    graspdimensionz = dz;
                }
            }
            else if(roundd(fabs(p)) == roundd(pi/2)){
                if(roundd(fabs(r)) == roundd(pi/2)){
                    graspdimensionx = dz;
                    graspdimensiony = dx;
                    graspdimensionz = dy;
                }
                else{
                    graspdimensionx = dz;
                    graspdimensiony = dy;
                    graspdimensionz = dx;
                }
            }
            else{
                graspdimensionx = dx;
                graspdimensiony = dy;
                graspdimensionz = dz;
            }
            ROS_WARN_STREAM(graspdimensionx);
            ROS_WARN_STREAM(graspdimensiony);
            ROS_WARN_STREAM(graspdimensionz);
            return;
        }

        double roundd(double f){
            double v = (int)(f * 100 + .5);
            return (double)v / 100;
        }
};

int main(int argc, char** argv)
{
    ros::init(argc, argv, "preplaccenode");
    ros::NodeHandle n;
    place k = place(&n);
    ros::spin();
}
